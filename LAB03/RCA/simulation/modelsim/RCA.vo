// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// VENDOR "Altera"
// PROGRAM "Quartus II 64-Bit"
// VERSION "Version 13.0.1 Build 232 06/12/2013 Service Pack 1 SJ Web Edition"

// DATE "11/12/2023 19:57:17"

// 
// Device: Altera EP4CGX15BF14C6 Package FBGA169
// 

// 
// This Verilog file should be used for ModelSim-Altera (Verilog) only
// 

`timescale 1 ps/ 1 ps

module RCA (
	Cout,
	a,
	b,
	Cin,
	s);
output 	Cout;
input 	[3:0] a;
input 	[3:0] b;
input 	Cin;
output 	[3:0] s;

wire gnd;
wire vcc;
wire unknown;

assign gnd = 1'b0;
assign vcc = 1'b1;
assign unknown = 1'bx;

tri1 devclrn;
tri1 devpor;
tri1 devoe;
wire \Cout~output_o ;
wire \s[3]~output_o ;
wire \s[2]~output_o ;
wire \s[1]~output_o ;
wire \s[0]~output_o ;
wire \a[0]~input_o ;
wire \Cin~input_o ;
wire \inst|inst5~1_combout ;
wire \a[1]~input_o ;
wire \b[1]~input_o ;
wire \inst1|inst5~0_combout ;
wire \inst2|inst5~0_combout ;
wire \a[2]~input_o ;
wire \inst2|inst5~1_combout ;
wire \a[3]~input_o ;
wire \b[3]~input_o ;
wire \inst3|inst5~0_combout ;
wire \inst3|inst2~combout ;
wire \b[2]~input_o ;
wire \inst2|inst2~0_combout ;
wire \inst|inst5~0_combout ;
wire \inst1|inst2~combout ;
wire \b[0]~input_o ;
wire \inst|inst2~0_combout ;


cycloneiv_io_obuf \Cout~output (
	.i(\inst3|inst5~0_combout ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\Cout~output_o ),
	.obar());
// synopsys translate_off
defparam \Cout~output .bus_hold = "false";
defparam \Cout~output .open_drain_output = "false";
// synopsys translate_on

cycloneiv_io_obuf \s[3]~output (
	.i(\inst3|inst2~combout ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\s[3]~output_o ),
	.obar());
// synopsys translate_off
defparam \s[3]~output .bus_hold = "false";
defparam \s[3]~output .open_drain_output = "false";
// synopsys translate_on

cycloneiv_io_obuf \s[2]~output (
	.i(\inst2|inst2~0_combout ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\s[2]~output_o ),
	.obar());
// synopsys translate_off
defparam \s[2]~output .bus_hold = "false";
defparam \s[2]~output .open_drain_output = "false";
// synopsys translate_on

cycloneiv_io_obuf \s[1]~output (
	.i(\inst1|inst2~combout ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\s[1]~output_o ),
	.obar());
// synopsys translate_off
defparam \s[1]~output .bus_hold = "false";
defparam \s[1]~output .open_drain_output = "false";
// synopsys translate_on

cycloneiv_io_obuf \s[0]~output (
	.i(\inst|inst2~0_combout ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\s[0]~output_o ),
	.obar());
// synopsys translate_off
defparam \s[0]~output .bus_hold = "false";
defparam \s[0]~output .open_drain_output = "false";
// synopsys translate_on

cycloneiv_io_ibuf \a[0]~input (
	.i(a[0]),
	.ibar(gnd),
	.o(\a[0]~input_o ));
// synopsys translate_off
defparam \a[0]~input .bus_hold = "false";
defparam \a[0]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneiv_io_ibuf \Cin~input (
	.i(Cin),
	.ibar(gnd),
	.o(\Cin~input_o ));
// synopsys translate_off
defparam \Cin~input .bus_hold = "false";
defparam \Cin~input .simulate_z_as = "z";
// synopsys translate_on

cycloneiv_lcell_comb \inst|inst5~1 (
// Equation(s):
// \inst|inst5~1_combout  = (\b[0]~input_o  & ((\a[0]~input_o ) # (\Cin~input_o )))

	.dataa(\b[0]~input_o ),
	.datab(\a[0]~input_o ),
	.datac(\Cin~input_o ),
	.datad(gnd),
	.cin(gnd),
	.combout(\inst|inst5~1_combout ),
	.cout());
// synopsys translate_off
defparam \inst|inst5~1 .lut_mask = 16'hA8A8;
defparam \inst|inst5~1 .sum_lutc_input = "datac";
// synopsys translate_on

cycloneiv_io_ibuf \a[1]~input (
	.i(a[1]),
	.ibar(gnd),
	.o(\a[1]~input_o ));
// synopsys translate_off
defparam \a[1]~input .bus_hold = "false";
defparam \a[1]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneiv_io_ibuf \b[1]~input (
	.i(b[1]),
	.ibar(gnd),
	.o(\b[1]~input_o ));
// synopsys translate_off
defparam \b[1]~input .bus_hold = "false";
defparam \b[1]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneiv_lcell_comb \inst1|inst5~0 (
// Equation(s):
// \inst1|inst5~0_combout  = (\a[1]~input_o  & ((\inst|inst5~0_combout ) # ((\inst|inst5~1_combout ) # (\b[1]~input_o )))) # (!\a[1]~input_o  & (\b[1]~input_o  & ((\inst|inst5~0_combout ) # (\inst|inst5~1_combout ))))

	.dataa(\inst|inst5~0_combout ),
	.datab(\inst|inst5~1_combout ),
	.datac(\a[1]~input_o ),
	.datad(\b[1]~input_o ),
	.cin(gnd),
	.combout(\inst1|inst5~0_combout ),
	.cout());
// synopsys translate_off
defparam \inst1|inst5~0 .lut_mask = 16'hFEE0;
defparam \inst1|inst5~0 .sum_lutc_input = "datac";
// synopsys translate_on

cycloneiv_lcell_comb \inst2|inst5~0 (
// Equation(s):
// \inst2|inst5~0_combout  = (\a[2]~input_o  & \inst1|inst5~0_combout )

	.dataa(\a[2]~input_o ),
	.datab(\inst1|inst5~0_combout ),
	.datac(gnd),
	.datad(gnd),
	.cin(gnd),
	.combout(\inst2|inst5~0_combout ),
	.cout());
// synopsys translate_off
defparam \inst2|inst5~0 .lut_mask = 16'h8888;
defparam \inst2|inst5~0 .sum_lutc_input = "datac";
// synopsys translate_on

cycloneiv_io_ibuf \a[2]~input (
	.i(a[2]),
	.ibar(gnd),
	.o(\a[2]~input_o ));
// synopsys translate_off
defparam \a[2]~input .bus_hold = "false";
defparam \a[2]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneiv_lcell_comb \inst2|inst5~1 (
// Equation(s):
// \inst2|inst5~1_combout  = (\b[2]~input_o  & ((\a[2]~input_o ) # (\inst1|inst5~0_combout )))

	.dataa(\b[2]~input_o ),
	.datab(\a[2]~input_o ),
	.datac(\inst1|inst5~0_combout ),
	.datad(gnd),
	.cin(gnd),
	.combout(\inst2|inst5~1_combout ),
	.cout());
// synopsys translate_off
defparam \inst2|inst5~1 .lut_mask = 16'hA8A8;
defparam \inst2|inst5~1 .sum_lutc_input = "datac";
// synopsys translate_on

cycloneiv_io_ibuf \a[3]~input (
	.i(a[3]),
	.ibar(gnd),
	.o(\a[3]~input_o ));
// synopsys translate_off
defparam \a[3]~input .bus_hold = "false";
defparam \a[3]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneiv_io_ibuf \b[3]~input (
	.i(b[3]),
	.ibar(gnd),
	.o(\b[3]~input_o ));
// synopsys translate_off
defparam \b[3]~input .bus_hold = "false";
defparam \b[3]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneiv_lcell_comb \inst3|inst5~0 (
// Equation(s):
// \inst3|inst5~0_combout  = (\a[3]~input_o  & ((\inst2|inst5~0_combout ) # ((\inst2|inst5~1_combout ) # (\b[3]~input_o )))) # (!\a[3]~input_o  & (\b[3]~input_o  & ((\inst2|inst5~0_combout ) # (\inst2|inst5~1_combout ))))

	.dataa(\inst2|inst5~0_combout ),
	.datab(\inst2|inst5~1_combout ),
	.datac(\a[3]~input_o ),
	.datad(\b[3]~input_o ),
	.cin(gnd),
	.combout(\inst3|inst5~0_combout ),
	.cout());
// synopsys translate_off
defparam \inst3|inst5~0 .lut_mask = 16'hFEE0;
defparam \inst3|inst5~0 .sum_lutc_input = "datac";
// synopsys translate_on

cycloneiv_lcell_comb \inst3|inst2 (
// Equation(s):
// \inst3|inst2~combout  = \a[3]~input_o  $ (\b[3]~input_o  $ (((\inst2|inst5~0_combout ) # (\inst2|inst5~1_combout ))))

	.dataa(\a[3]~input_o ),
	.datab(\b[3]~input_o ),
	.datac(\inst2|inst5~0_combout ),
	.datad(\inst2|inst5~1_combout ),
	.cin(gnd),
	.combout(\inst3|inst2~combout ),
	.cout());
// synopsys translate_off
defparam \inst3|inst2 .lut_mask = 16'h9996;
defparam \inst3|inst2 .sum_lutc_input = "datac";
// synopsys translate_on

cycloneiv_io_ibuf \b[2]~input (
	.i(b[2]),
	.ibar(gnd),
	.o(\b[2]~input_o ));
// synopsys translate_off
defparam \b[2]~input .bus_hold = "false";
defparam \b[2]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneiv_lcell_comb \inst2|inst2~0 (
// Equation(s):
// \inst2|inst2~0_combout  = \a[2]~input_o  $ (\inst1|inst5~0_combout  $ (\b[2]~input_o ))

	.dataa(\a[2]~input_o ),
	.datab(\inst1|inst5~0_combout ),
	.datac(\b[2]~input_o ),
	.datad(gnd),
	.cin(gnd),
	.combout(\inst2|inst2~0_combout ),
	.cout());
// synopsys translate_off
defparam \inst2|inst2~0 .lut_mask = 16'h9696;
defparam \inst2|inst2~0 .sum_lutc_input = "datac";
// synopsys translate_on

cycloneiv_lcell_comb \inst|inst5~0 (
// Equation(s):
// \inst|inst5~0_combout  = (\a[0]~input_o  & \Cin~input_o )

	.dataa(\a[0]~input_o ),
	.datab(\Cin~input_o ),
	.datac(gnd),
	.datad(gnd),
	.cin(gnd),
	.combout(\inst|inst5~0_combout ),
	.cout());
// synopsys translate_off
defparam \inst|inst5~0 .lut_mask = 16'h8888;
defparam \inst|inst5~0 .sum_lutc_input = "datac";
// synopsys translate_on

cycloneiv_lcell_comb \inst1|inst2 (
// Equation(s):
// \inst1|inst2~combout  = \a[1]~input_o  $ (\b[1]~input_o  $ (((\inst|inst5~0_combout ) # (\inst|inst5~1_combout ))))

	.dataa(\a[1]~input_o ),
	.datab(\b[1]~input_o ),
	.datac(\inst|inst5~0_combout ),
	.datad(\inst|inst5~1_combout ),
	.cin(gnd),
	.combout(\inst1|inst2~combout ),
	.cout());
// synopsys translate_off
defparam \inst1|inst2 .lut_mask = 16'h9996;
defparam \inst1|inst2 .sum_lutc_input = "datac";
// synopsys translate_on

cycloneiv_io_ibuf \b[0]~input (
	.i(b[0]),
	.ibar(gnd),
	.o(\b[0]~input_o ));
// synopsys translate_off
defparam \b[0]~input .bus_hold = "false";
defparam \b[0]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneiv_lcell_comb \inst|inst2~0 (
// Equation(s):
// \inst|inst2~0_combout  = \a[0]~input_o  $ (\Cin~input_o  $ (\b[0]~input_o ))

	.dataa(\a[0]~input_o ),
	.datab(\Cin~input_o ),
	.datac(\b[0]~input_o ),
	.datad(gnd),
	.cin(gnd),
	.combout(\inst|inst2~0_combout ),
	.cout());
// synopsys translate_off
defparam \inst|inst2~0 .lut_mask = 16'h9696;
defparam \inst|inst2~0 .sum_lutc_input = "datac";
// synopsys translate_on

assign Cout = \Cout~output_o ;

assign s[3] = \s[3]~output_o ;

assign s[2] = \s[2]~output_o ;

assign s[1] = \s[1]~output_o ;

assign s[0] = \s[0]~output_o ;

endmodule
