// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/20/2023 19:56:48"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    ULA
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module ULA_vlg_sample_tst(
	Cin,
	S,
	X,
	Y,
	sampler_tx
);
input  Cin;
input [2:0] S;
input [7:0] X;
input [7:0] Y;
output sampler_tx;

reg sample;
time current_time;
always @(Cin or S or X or Y)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module ULA_vlg_check_tst (
	Cout,
	flag_n,
	flag_z,
	Z,
	sampler_rx
);
input  Cout;
input  flag_n;
input  flag_z;
input [7:0] Z;
input sampler_rx;

reg  Cout_expected;
reg  flag_n_expected;
reg  flag_z_expected;
reg [7:0] Z_expected;

reg  Cout_prev;
reg  flag_n_prev;
reg  flag_z_prev;
reg [7:0] Z_prev;

reg  Cout_expected_prev;
reg  flag_n_expected_prev;
reg  flag_z_expected_prev;
reg [7:0] Z_expected_prev;

reg  last_Cout_exp;
reg  last_flag_n_exp;
reg  last_flag_z_exp;
reg [7:0] last_Z_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:4] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 4'b1;
end

// update real /o prevs

always @(trigger)
begin
	Cout_prev = Cout;
	flag_n_prev = flag_n;
	flag_z_prev = flag_z;
	Z_prev = Z;
end

// update expected /o prevs

always @(trigger)
begin
	Cout_expected_prev = Cout_expected;
	flag_n_expected_prev = flag_n_expected;
	flag_z_expected_prev = flag_z_expected;
	Z_expected_prev = Z_expected;
end



// expected Cout
initial
begin
	Cout_expected = 1'bX;
end 

// expected flag_n
initial
begin
	flag_n_expected = 1'bX;
end 

// expected flag_z
initial
begin
	flag_z_expected = 1'bX;
end 
// expected Z[ 7 ]
initial
begin
	Z_expected[7] = 1'bX;
end 
// expected Z[ 6 ]
initial
begin
	Z_expected[6] = 1'bX;
end 
// expected Z[ 5 ]
initial
begin
	Z_expected[5] = 1'bX;
end 
// expected Z[ 4 ]
initial
begin
	Z_expected[4] = 1'bX;
end 
// expected Z[ 3 ]
initial
begin
	Z_expected[3] = 1'bX;
end 
// expected Z[ 2 ]
initial
begin
	Z_expected[2] = 1'bX;
end 
// expected Z[ 1 ]
initial
begin
	Z_expected[1] = 1'bX;
end 
// expected Z[ 0 ]
initial
begin
	Z_expected[0] = 1'bX;
end 
// generate trigger
always @(Cout_expected or Cout or flag_n_expected or flag_n or flag_z_expected or flag_z or Z_expected or Z)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected Cout = %b | expected flag_n = %b | expected flag_z = %b | expected Z = %b | ",Cout_expected_prev,flag_n_expected_prev,flag_z_expected_prev,Z_expected_prev);
	$display("| real Cout = %b | real flag_n = %b | real flag_z = %b | real Z = %b | ",Cout_prev,flag_n_prev,flag_z_prev,Z_prev);
`endif
	if (
		( Cout_expected_prev !== 1'bx ) && ( Cout_prev !== Cout_expected_prev )
		&& ((Cout_expected_prev !== last_Cout_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Cout :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Cout_expected_prev);
		$display ("     Real value = %b", Cout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Cout_exp = Cout_expected_prev;
	end
	if (
		( flag_n_expected_prev !== 1'bx ) && ( flag_n_prev !== flag_n_expected_prev )
		&& ((flag_n_expected_prev !== last_flag_n_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port flag_n :: @time = %t",  $realtime);
		$display ("     Expected value = %b", flag_n_expected_prev);
		$display ("     Real value = %b", flag_n_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_flag_n_exp = flag_n_expected_prev;
	end
	if (
		( flag_z_expected_prev !== 1'bx ) && ( flag_z_prev !== flag_z_expected_prev )
		&& ((flag_z_expected_prev !== last_flag_z_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port flag_z :: @time = %t",  $realtime);
		$display ("     Expected value = %b", flag_z_expected_prev);
		$display ("     Real value = %b", flag_z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_flag_z_exp = flag_z_expected_prev;
	end
	if (
		( Z_expected_prev[0] !== 1'bx ) && ( Z_prev[0] !== Z_expected_prev[0] )
		&& ((Z_expected_prev[0] !== last_Z_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Z[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Z_expected_prev);
		$display ("     Real value = %b", Z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Z_exp[0] = Z_expected_prev[0];
	end
	if (
		( Z_expected_prev[1] !== 1'bx ) && ( Z_prev[1] !== Z_expected_prev[1] )
		&& ((Z_expected_prev[1] !== last_Z_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Z[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Z_expected_prev);
		$display ("     Real value = %b", Z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Z_exp[1] = Z_expected_prev[1];
	end
	if (
		( Z_expected_prev[2] !== 1'bx ) && ( Z_prev[2] !== Z_expected_prev[2] )
		&& ((Z_expected_prev[2] !== last_Z_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Z[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Z_expected_prev);
		$display ("     Real value = %b", Z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Z_exp[2] = Z_expected_prev[2];
	end
	if (
		( Z_expected_prev[3] !== 1'bx ) && ( Z_prev[3] !== Z_expected_prev[3] )
		&& ((Z_expected_prev[3] !== last_Z_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Z[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Z_expected_prev);
		$display ("     Real value = %b", Z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Z_exp[3] = Z_expected_prev[3];
	end
	if (
		( Z_expected_prev[4] !== 1'bx ) && ( Z_prev[4] !== Z_expected_prev[4] )
		&& ((Z_expected_prev[4] !== last_Z_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Z[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Z_expected_prev);
		$display ("     Real value = %b", Z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Z_exp[4] = Z_expected_prev[4];
	end
	if (
		( Z_expected_prev[5] !== 1'bx ) && ( Z_prev[5] !== Z_expected_prev[5] )
		&& ((Z_expected_prev[5] !== last_Z_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Z[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Z_expected_prev);
		$display ("     Real value = %b", Z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Z_exp[5] = Z_expected_prev[5];
	end
	if (
		( Z_expected_prev[6] !== 1'bx ) && ( Z_prev[6] !== Z_expected_prev[6] )
		&& ((Z_expected_prev[6] !== last_Z_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Z[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Z_expected_prev);
		$display ("     Real value = %b", Z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Z_exp[6] = Z_expected_prev[6];
	end
	if (
		( Z_expected_prev[7] !== 1'bx ) && ( Z_prev[7] !== Z_expected_prev[7] )
		&& ((Z_expected_prev[7] !== last_Z_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Z[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Z_expected_prev);
		$display ("     Real value = %b", Z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Z_exp[7] = Z_expected_prev[7];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module ULA_vlg_vec_tst();
// constants                                           
// general purpose registers
reg Cin;
reg [2:0] S;
reg [7:0] X;
reg [7:0] Y;
// wires                                               
wire Cout;
wire flag_n;
wire flag_z;
wire [7:0] Z;

wire sampler;                             

// assign statements (if any)                          
ULA i1 (
// port map - connection between master ports and signals/registers   
	.Cin(Cin),
	.Cout(Cout),
	.flag_n(flag_n),
	.flag_z(flag_z),
	.S(S),
	.X(X),
	.Y(Y),
	.Z(Z)
);

// Cin
initial
begin
	Cin = 1'b0;
end 
// S[ 2 ]
initial
begin
	S[2] = 1'b1;
end 
// S[ 1 ]
initial
begin
	S[1] = 1'b0;
end 
// S[ 0 ]
initial
begin
	S[0] = 1'b0;
end 
// X[ 7 ]
initial
begin
	X[7] = 1'b1;
end 
// X[ 6 ]
initial
begin
	X[6] = 1'b0;
end 
// X[ 5 ]
initial
begin
	X[5] = 1'b0;
end 
// X[ 4 ]
initial
begin
	X[4] = 1'b0;
end 
// X[ 3 ]
initial
begin
	X[3] = 1'b1;
end 
// X[ 2 ]
initial
begin
	X[2] = 1'b0;
end 
// X[ 1 ]
initial
begin
	X[1] = 1'b1;
end 
// X[ 0 ]
initial
begin
	X[0] = 1'b0;
end 
// Y[ 7 ]
initial
begin
	Y[7] = 1'b0;
end 
// Y[ 6 ]
initial
begin
	Y[6] = 1'b1;
end 
// Y[ 5 ]
initial
begin
	Y[5] = 1'b0;
end 
// Y[ 4 ]
initial
begin
	Y[4] = 1'b1;
end 
// Y[ 3 ]
initial
begin
	Y[3] = 1'b0;
end 
// Y[ 2 ]
initial
begin
	Y[2] = 1'b0;
end 
// Y[ 1 ]
initial
begin
	Y[1] = 1'b1;
end 
// Y[ 0 ]
initial
begin
	Y[0] = 1'b0;
end 

ULA_vlg_sample_tst tb_sample (
	.Cin(Cin),
	.S(S),
	.X(X),
	.Y(Y),
	.sampler_tx(sampler)
);

ULA_vlg_check_tst tb_out(
	.Cout(Cout),
	.flag_n(flag_n),
	.flag_z(flag_z),
	.Z(Z),
	.sampler_rx(sampler)
);
endmodule

