// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "02/04/2024 18:15:36"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Trabalho_Final
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Trabalho_Final_vlg_sample_tst(
	botao_passo,
	clk_in,
	rst,
	switch,
	sampler_tx
);
input  botao_passo;
input  clk_in;
input  rst;
input  switch;
output sampler_tx;

reg sample;
time current_time;
always @(botao_passo or clk_in or rst or switch)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Trabalho_Final_vlg_check_tst (
	CLOCK,
	display,
	displayPC,
	FREQ_DIVD,
	HLT,
	SAIDA_ACUMULADOR,
	saida_negativo,
	SAIDA_PC,
	saida_ri,
	saida_zero,
	sampler_rx
);
input  CLOCK;
input [13:0] display;
input [13:0] displayPC;
input  FREQ_DIVD;
input  HLT;
input [7:0] SAIDA_ACUMULADOR;
input  saida_negativo;
input [7:0] SAIDA_PC;
input [7:0] saida_ri;
input  saida_zero;
input sampler_rx;

reg  CLOCK_expected;
reg [13:0] display_expected;
reg [13:0] displayPC_expected;
reg  FREQ_DIVD_expected;
reg  HLT_expected;
reg [7:0] SAIDA_ACUMULADOR_expected;
reg  saida_negativo_expected;
reg [7:0] SAIDA_PC_expected;
reg [7:0] saida_ri_expected;
reg  saida_zero_expected;

reg  CLOCK_prev;
reg [13:0] display_prev;
reg [13:0] displayPC_prev;
reg  FREQ_DIVD_prev;
reg  HLT_prev;
reg [7:0] SAIDA_ACUMULADOR_prev;
reg  saida_negativo_prev;
reg [7:0] SAIDA_PC_prev;
reg [7:0] saida_ri_prev;
reg  saida_zero_prev;

reg [7:0] SAIDA_ACUMULADOR_expected_prev;
reg  saida_negativo_expected_prev;
reg [7:0] SAIDA_PC_expected_prev;
reg [7:0] saida_ri_expected_prev;
reg  saida_zero_expected_prev;

reg [7:0] last_SAIDA_ACUMULADOR_exp;
reg  last_saida_negativo_exp;
reg [7:0] last_SAIDA_PC_exp;
reg [7:0] last_saida_ri_exp;
reg  last_saida_zero_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:10] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 10'b1;
end

// update real /o prevs

always @(trigger)
begin
	CLOCK_prev = CLOCK;
	display_prev = display;
	displayPC_prev = displayPC;
	FREQ_DIVD_prev = FREQ_DIVD;
	HLT_prev = HLT;
	SAIDA_ACUMULADOR_prev = SAIDA_ACUMULADOR;
	saida_negativo_prev = saida_negativo;
	SAIDA_PC_prev = SAIDA_PC;
	saida_ri_prev = saida_ri;
	saida_zero_prev = saida_zero;
end

// update expected /o prevs

always @(trigger)
begin
	SAIDA_ACUMULADOR_expected_prev = SAIDA_ACUMULADOR_expected;
	saida_negativo_expected_prev = saida_negativo_expected;
	SAIDA_PC_expected_prev = SAIDA_PC_expected;
	saida_ri_expected_prev = saida_ri_expected;
	saida_zero_expected_prev = saida_zero_expected;
end


// expected SAIDA_PC[ 7 ]
initial
begin
	SAIDA_PC_expected[7] = 1'bX;
end 
// expected SAIDA_PC[ 6 ]
initial
begin
	SAIDA_PC_expected[6] = 1'bX;
end 
// expected SAIDA_PC[ 5 ]
initial
begin
	SAIDA_PC_expected[5] = 1'bX;
end 
// expected SAIDA_PC[ 4 ]
initial
begin
	SAIDA_PC_expected[4] = 1'bX;
end 
// expected SAIDA_PC[ 3 ]
initial
begin
	SAIDA_PC_expected[3] = 1'bX;
end 
// expected SAIDA_PC[ 2 ]
initial
begin
	SAIDA_PC_expected[2] = 1'bX;
end 
// expected SAIDA_PC[ 1 ]
initial
begin
	SAIDA_PC_expected[1] = 1'bX;
end 
// expected SAIDA_PC[ 0 ]
initial
begin
	SAIDA_PC_expected[0] = 1'bX;
end 
// expected saida_ri[ 7 ]
initial
begin
	saida_ri_expected[7] = 1'bX;
end 
// expected saida_ri[ 6 ]
initial
begin
	saida_ri_expected[6] = 1'bX;
end 
// expected saida_ri[ 5 ]
initial
begin
	saida_ri_expected[5] = 1'bX;
end 
// expected saida_ri[ 4 ]
initial
begin
	saida_ri_expected[4] = 1'bX;
end 
// expected saida_ri[ 3 ]
initial
begin
	saida_ri_expected[3] = 1'bX;
end 
// expected saida_ri[ 2 ]
initial
begin
	saida_ri_expected[2] = 1'bX;
end 
// expected saida_ri[ 1 ]
initial
begin
	saida_ri_expected[1] = 1'bX;
end 
// expected saida_ri[ 0 ]
initial
begin
	saida_ri_expected[0] = 1'bX;
end 
// expected SAIDA_ACUMULADOR[ 7 ]
initial
begin
	SAIDA_ACUMULADOR_expected[7] = 1'bX;
end 
// expected SAIDA_ACUMULADOR[ 6 ]
initial
begin
	SAIDA_ACUMULADOR_expected[6] = 1'bX;
end 
// expected SAIDA_ACUMULADOR[ 5 ]
initial
begin
	SAIDA_ACUMULADOR_expected[5] = 1'bX;
end 
// expected SAIDA_ACUMULADOR[ 4 ]
initial
begin
	SAIDA_ACUMULADOR_expected[4] = 1'bX;
end 
// expected SAIDA_ACUMULADOR[ 3 ]
initial
begin
	SAIDA_ACUMULADOR_expected[3] = 1'bX;
end 
// expected SAIDA_ACUMULADOR[ 2 ]
initial
begin
	SAIDA_ACUMULADOR_expected[2] = 1'bX;
end 
// expected SAIDA_ACUMULADOR[ 1 ]
initial
begin
	SAIDA_ACUMULADOR_expected[1] = 1'bX;
end 
// expected SAIDA_ACUMULADOR[ 0 ]
initial
begin
	SAIDA_ACUMULADOR_expected[0] = 1'bX;
end 

// expected saida_negativo
initial
begin
	saida_negativo_expected = 1'bX;
end 

// expected saida_zero
initial
begin
	saida_zero_expected = 1'bX;
end 
// generate trigger
always @(CLOCK_expected or CLOCK or display_expected or display or displayPC_expected or displayPC or FREQ_DIVD_expected or FREQ_DIVD or HLT_expected or HLT or SAIDA_ACUMULADOR_expected or SAIDA_ACUMULADOR or saida_negativo_expected or saida_negativo or SAIDA_PC_expected or SAIDA_PC or saida_ri_expected or saida_ri or saida_zero_expected or saida_zero)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected CLOCK = %b | expected display = %b | expected displayPC = %b | expected FREQ_DIVD = %b | expected HLT = %b | expected SAIDA_ACUMULADOR = %b | expected saida_negativo = %b | expected SAIDA_PC = %b | expected saida_ri = %b | expected saida_zero = %b | ",CLOCK_expected_prev,display_expected_prev,displayPC_expected_prev,FREQ_DIVD_expected_prev,HLT_expected_prev,SAIDA_ACUMULADOR_expected_prev,saida_negativo_expected_prev,SAIDA_PC_expected_prev,saida_ri_expected_prev,saida_zero_expected_prev);
	$display("| real CLOCK = %b | real display = %b | real displayPC = %b | real FREQ_DIVD = %b | real HLT = %b | real SAIDA_ACUMULADOR = %b | real saida_negativo = %b | real SAIDA_PC = %b | real saida_ri = %b | real saida_zero = %b | ",CLOCK_prev,display_prev,displayPC_prev,FREQ_DIVD_prev,HLT_prev,SAIDA_ACUMULADOR_prev,saida_negativo_prev,SAIDA_PC_prev,saida_ri_prev,saida_zero_prev);
`endif
	if (
		( SAIDA_ACUMULADOR_expected_prev[0] !== 1'bx ) && ( SAIDA_ACUMULADOR_prev[0] !== SAIDA_ACUMULADOR_expected_prev[0] )
		&& ((SAIDA_ACUMULADOR_expected_prev[0] !== last_SAIDA_ACUMULADOR_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SAIDA_ACUMULADOR[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SAIDA_ACUMULADOR_expected_prev);
		$display ("     Real value = %b", SAIDA_ACUMULADOR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_SAIDA_ACUMULADOR_exp[0] = SAIDA_ACUMULADOR_expected_prev[0];
	end
	if (
		( SAIDA_ACUMULADOR_expected_prev[1] !== 1'bx ) && ( SAIDA_ACUMULADOR_prev[1] !== SAIDA_ACUMULADOR_expected_prev[1] )
		&& ((SAIDA_ACUMULADOR_expected_prev[1] !== last_SAIDA_ACUMULADOR_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SAIDA_ACUMULADOR[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SAIDA_ACUMULADOR_expected_prev);
		$display ("     Real value = %b", SAIDA_ACUMULADOR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_SAIDA_ACUMULADOR_exp[1] = SAIDA_ACUMULADOR_expected_prev[1];
	end
	if (
		( SAIDA_ACUMULADOR_expected_prev[2] !== 1'bx ) && ( SAIDA_ACUMULADOR_prev[2] !== SAIDA_ACUMULADOR_expected_prev[2] )
		&& ((SAIDA_ACUMULADOR_expected_prev[2] !== last_SAIDA_ACUMULADOR_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SAIDA_ACUMULADOR[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SAIDA_ACUMULADOR_expected_prev);
		$display ("     Real value = %b", SAIDA_ACUMULADOR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_SAIDA_ACUMULADOR_exp[2] = SAIDA_ACUMULADOR_expected_prev[2];
	end
	if (
		( SAIDA_ACUMULADOR_expected_prev[3] !== 1'bx ) && ( SAIDA_ACUMULADOR_prev[3] !== SAIDA_ACUMULADOR_expected_prev[3] )
		&& ((SAIDA_ACUMULADOR_expected_prev[3] !== last_SAIDA_ACUMULADOR_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SAIDA_ACUMULADOR[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SAIDA_ACUMULADOR_expected_prev);
		$display ("     Real value = %b", SAIDA_ACUMULADOR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_SAIDA_ACUMULADOR_exp[3] = SAIDA_ACUMULADOR_expected_prev[3];
	end
	if (
		( SAIDA_ACUMULADOR_expected_prev[4] !== 1'bx ) && ( SAIDA_ACUMULADOR_prev[4] !== SAIDA_ACUMULADOR_expected_prev[4] )
		&& ((SAIDA_ACUMULADOR_expected_prev[4] !== last_SAIDA_ACUMULADOR_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SAIDA_ACUMULADOR[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SAIDA_ACUMULADOR_expected_prev);
		$display ("     Real value = %b", SAIDA_ACUMULADOR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_SAIDA_ACUMULADOR_exp[4] = SAIDA_ACUMULADOR_expected_prev[4];
	end
	if (
		( SAIDA_ACUMULADOR_expected_prev[5] !== 1'bx ) && ( SAIDA_ACUMULADOR_prev[5] !== SAIDA_ACUMULADOR_expected_prev[5] )
		&& ((SAIDA_ACUMULADOR_expected_prev[5] !== last_SAIDA_ACUMULADOR_exp[5]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SAIDA_ACUMULADOR[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SAIDA_ACUMULADOR_expected_prev);
		$display ("     Real value = %b", SAIDA_ACUMULADOR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_SAIDA_ACUMULADOR_exp[5] = SAIDA_ACUMULADOR_expected_prev[5];
	end
	if (
		( SAIDA_ACUMULADOR_expected_prev[6] !== 1'bx ) && ( SAIDA_ACUMULADOR_prev[6] !== SAIDA_ACUMULADOR_expected_prev[6] )
		&& ((SAIDA_ACUMULADOR_expected_prev[6] !== last_SAIDA_ACUMULADOR_exp[6]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SAIDA_ACUMULADOR[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SAIDA_ACUMULADOR_expected_prev);
		$display ("     Real value = %b", SAIDA_ACUMULADOR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_SAIDA_ACUMULADOR_exp[6] = SAIDA_ACUMULADOR_expected_prev[6];
	end
	if (
		( SAIDA_ACUMULADOR_expected_prev[7] !== 1'bx ) && ( SAIDA_ACUMULADOR_prev[7] !== SAIDA_ACUMULADOR_expected_prev[7] )
		&& ((SAIDA_ACUMULADOR_expected_prev[7] !== last_SAIDA_ACUMULADOR_exp[7]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SAIDA_ACUMULADOR[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SAIDA_ACUMULADOR_expected_prev);
		$display ("     Real value = %b", SAIDA_ACUMULADOR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_SAIDA_ACUMULADOR_exp[7] = SAIDA_ACUMULADOR_expected_prev[7];
	end
	if (
		( saida_negativo_expected_prev !== 1'bx ) && ( saida_negativo_prev !== saida_negativo_expected_prev )
		&& ((saida_negativo_expected_prev !== last_saida_negativo_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_negativo :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_negativo_expected_prev);
		$display ("     Real value = %b", saida_negativo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_saida_negativo_exp = saida_negativo_expected_prev;
	end
	if (
		( SAIDA_PC_expected_prev[0] !== 1'bx ) && ( SAIDA_PC_prev[0] !== SAIDA_PC_expected_prev[0] )
		&& ((SAIDA_PC_expected_prev[0] !== last_SAIDA_PC_exp[0]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SAIDA_PC[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SAIDA_PC_expected_prev);
		$display ("     Real value = %b", SAIDA_PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_SAIDA_PC_exp[0] = SAIDA_PC_expected_prev[0];
	end
	if (
		( SAIDA_PC_expected_prev[1] !== 1'bx ) && ( SAIDA_PC_prev[1] !== SAIDA_PC_expected_prev[1] )
		&& ((SAIDA_PC_expected_prev[1] !== last_SAIDA_PC_exp[1]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SAIDA_PC[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SAIDA_PC_expected_prev);
		$display ("     Real value = %b", SAIDA_PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_SAIDA_PC_exp[1] = SAIDA_PC_expected_prev[1];
	end
	if (
		( SAIDA_PC_expected_prev[2] !== 1'bx ) && ( SAIDA_PC_prev[2] !== SAIDA_PC_expected_prev[2] )
		&& ((SAIDA_PC_expected_prev[2] !== last_SAIDA_PC_exp[2]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SAIDA_PC[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SAIDA_PC_expected_prev);
		$display ("     Real value = %b", SAIDA_PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_SAIDA_PC_exp[2] = SAIDA_PC_expected_prev[2];
	end
	if (
		( SAIDA_PC_expected_prev[3] !== 1'bx ) && ( SAIDA_PC_prev[3] !== SAIDA_PC_expected_prev[3] )
		&& ((SAIDA_PC_expected_prev[3] !== last_SAIDA_PC_exp[3]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SAIDA_PC[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SAIDA_PC_expected_prev);
		$display ("     Real value = %b", SAIDA_PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_SAIDA_PC_exp[3] = SAIDA_PC_expected_prev[3];
	end
	if (
		( SAIDA_PC_expected_prev[4] !== 1'bx ) && ( SAIDA_PC_prev[4] !== SAIDA_PC_expected_prev[4] )
		&& ((SAIDA_PC_expected_prev[4] !== last_SAIDA_PC_exp[4]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SAIDA_PC[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SAIDA_PC_expected_prev);
		$display ("     Real value = %b", SAIDA_PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_SAIDA_PC_exp[4] = SAIDA_PC_expected_prev[4];
	end
	if (
		( SAIDA_PC_expected_prev[5] !== 1'bx ) && ( SAIDA_PC_prev[5] !== SAIDA_PC_expected_prev[5] )
		&& ((SAIDA_PC_expected_prev[5] !== last_SAIDA_PC_exp[5]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SAIDA_PC[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SAIDA_PC_expected_prev);
		$display ("     Real value = %b", SAIDA_PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_SAIDA_PC_exp[5] = SAIDA_PC_expected_prev[5];
	end
	if (
		( SAIDA_PC_expected_prev[6] !== 1'bx ) && ( SAIDA_PC_prev[6] !== SAIDA_PC_expected_prev[6] )
		&& ((SAIDA_PC_expected_prev[6] !== last_SAIDA_PC_exp[6]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SAIDA_PC[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SAIDA_PC_expected_prev);
		$display ("     Real value = %b", SAIDA_PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_SAIDA_PC_exp[6] = SAIDA_PC_expected_prev[6];
	end
	if (
		( SAIDA_PC_expected_prev[7] !== 1'bx ) && ( SAIDA_PC_prev[7] !== SAIDA_PC_expected_prev[7] )
		&& ((SAIDA_PC_expected_prev[7] !== last_SAIDA_PC_exp[7]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SAIDA_PC[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SAIDA_PC_expected_prev);
		$display ("     Real value = %b", SAIDA_PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_SAIDA_PC_exp[7] = SAIDA_PC_expected_prev[7];
	end
	if (
		( saida_ri_expected_prev[0] !== 1'bx ) && ( saida_ri_prev[0] !== saida_ri_expected_prev[0] )
		&& ((saida_ri_expected_prev[0] !== last_saida_ri_exp[0]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_ri[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_ri_expected_prev);
		$display ("     Real value = %b", saida_ri_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_saida_ri_exp[0] = saida_ri_expected_prev[0];
	end
	if (
		( saida_ri_expected_prev[1] !== 1'bx ) && ( saida_ri_prev[1] !== saida_ri_expected_prev[1] )
		&& ((saida_ri_expected_prev[1] !== last_saida_ri_exp[1]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_ri[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_ri_expected_prev);
		$display ("     Real value = %b", saida_ri_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_saida_ri_exp[1] = saida_ri_expected_prev[1];
	end
	if (
		( saida_ri_expected_prev[2] !== 1'bx ) && ( saida_ri_prev[2] !== saida_ri_expected_prev[2] )
		&& ((saida_ri_expected_prev[2] !== last_saida_ri_exp[2]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_ri[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_ri_expected_prev);
		$display ("     Real value = %b", saida_ri_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_saida_ri_exp[2] = saida_ri_expected_prev[2];
	end
	if (
		( saida_ri_expected_prev[3] !== 1'bx ) && ( saida_ri_prev[3] !== saida_ri_expected_prev[3] )
		&& ((saida_ri_expected_prev[3] !== last_saida_ri_exp[3]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_ri[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_ri_expected_prev);
		$display ("     Real value = %b", saida_ri_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_saida_ri_exp[3] = saida_ri_expected_prev[3];
	end
	if (
		( saida_ri_expected_prev[4] !== 1'bx ) && ( saida_ri_prev[4] !== saida_ri_expected_prev[4] )
		&& ((saida_ri_expected_prev[4] !== last_saida_ri_exp[4]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_ri[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_ri_expected_prev);
		$display ("     Real value = %b", saida_ri_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_saida_ri_exp[4] = saida_ri_expected_prev[4];
	end
	if (
		( saida_ri_expected_prev[5] !== 1'bx ) && ( saida_ri_prev[5] !== saida_ri_expected_prev[5] )
		&& ((saida_ri_expected_prev[5] !== last_saida_ri_exp[5]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_ri[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_ri_expected_prev);
		$display ("     Real value = %b", saida_ri_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_saida_ri_exp[5] = saida_ri_expected_prev[5];
	end
	if (
		( saida_ri_expected_prev[6] !== 1'bx ) && ( saida_ri_prev[6] !== saida_ri_expected_prev[6] )
		&& ((saida_ri_expected_prev[6] !== last_saida_ri_exp[6]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_ri[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_ri_expected_prev);
		$display ("     Real value = %b", saida_ri_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_saida_ri_exp[6] = saida_ri_expected_prev[6];
	end
	if (
		( saida_ri_expected_prev[7] !== 1'bx ) && ( saida_ri_prev[7] !== saida_ri_expected_prev[7] )
		&& ((saida_ri_expected_prev[7] !== last_saida_ri_exp[7]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_ri[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_ri_expected_prev);
		$display ("     Real value = %b", saida_ri_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_saida_ri_exp[7] = saida_ri_expected_prev[7];
	end
	if (
		( saida_zero_expected_prev !== 1'bx ) && ( saida_zero_prev !== saida_zero_expected_prev )
		&& ((saida_zero_expected_prev !== last_saida_zero_exp) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_zero :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_zero_expected_prev);
		$display ("     Real value = %b", saida_zero_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_saida_zero_exp = saida_zero_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Trabalho_Final_vlg_vec_tst();
// constants                                           
// general purpose registers
reg botao_passo;
reg clk_in;
reg rst;
reg switch;
// wires                                               
wire CLOCK;
wire [13:0] display;
wire [13:0] displayPC;
wire FREQ_DIVD;
wire HLT;
wire [7:0] SAIDA_ACUMULADOR;
wire saida_negativo;
wire [7:0] SAIDA_PC;
wire [7:0] saida_ri;
wire saida_zero;

wire sampler;                             

// assign statements (if any)                          
Trabalho_Final i1 (
// port map - connection between master ports and signals/registers   
	.botao_passo(botao_passo),
	.clk_in(clk_in),
	.CLOCK(CLOCK),
	.display(display),
	.displayPC(displayPC),
	.FREQ_DIVD(FREQ_DIVD),
	.HLT(HLT),
	.rst(rst),
	.SAIDA_ACUMULADOR(SAIDA_ACUMULADOR),
	.saida_negativo(saida_negativo),
	.SAIDA_PC(SAIDA_PC),
	.saida_ri(saida_ri),
	.saida_zero(saida_zero),
	.switch(switch)
);

// botao_passo
initial
begin
	botao_passo = 1'b0;
end 

// rst
initial
begin
	rst = 1'b0;
	rst = #10000 1'b1;
end 

// switch
initial
begin
	switch = 1'b0;
end 

// clk_in
always
begin
	clk_in = 1'b0;
	clk_in = #5000 1'b1;
	#5000;
end 

Trabalho_Final_vlg_sample_tst tb_sample (
	.botao_passo(botao_passo),
	.clk_in(clk_in),
	.rst(rst),
	.switch(switch),
	.sampler_tx(sampler)
);

Trabalho_Final_vlg_check_tst tb_out(
	.CLOCK(CLOCK),
	.display(display),
	.displayPC(displayPC),
	.FREQ_DIVD(FREQ_DIVD),
	.HLT(HLT),
	.SAIDA_ACUMULADOR(SAIDA_ACUMULADOR),
	.saida_negativo(saida_negativo),
	.SAIDA_PC(SAIDA_PC),
	.saida_ri(saida_ri),
	.saida_zero(saida_zero),
	.sampler_rx(sampler)
);
endmodule

